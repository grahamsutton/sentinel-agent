name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests
        run: cargo test --bins

  build:
    name: Build for ${{ matrix.target }}
    needs: unit-tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: sentinel-agent
            asset_name: sentinel-agent-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: sentinel-agent
            asset_name: sentinel-agent-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: sentinel-agent
            asset_name: sentinel-agent-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: sentinel-agent
            asset_name: sentinel-agent-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: sentinel-agent.exe
            asset_name: sentinel-agent-windows-x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        if command -v sha256sum > /dev/null; then
          sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
        else
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
        fi

    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ${{ matrix.asset_name }}.zip
        Get-FileHash -Algorithm SHA256 ${{ matrix.asset_name }}.zip | ForEach-Object { $_.Hash.ToLower() + "  " + $_.Path.Split('\')[-1] } > ${{ matrix.asset_name }}.zip.sha256

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.asset_name }}.*

  test-binaries:
    name: Test ${{ matrix.target }} Binary
    needs: build
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: sentinel-agent-linux-x86_64
            binary_name: sentinel-agent
            test_config: tests/integration/test-config.yaml
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: sentinel-agent-linux-aarch64
            binary_name: sentinel-agent
            test_config: tests/integration/test-config.yaml
            qemu: true
          - target: x86_64-apple-darwin
            os: macos-13  # Intel runner
            asset_name: sentinel-agent-macos-x86_64
            binary_name: sentinel-agent
            test_config: tests/integration/test-config.yaml
          - target: aarch64-apple-darwin
            os: macos-latest  # Apple Silicon runner
            asset_name: sentinel-agent-macos-aarch64
            binary_name: sentinel-agent
            test_config: tests/integration/test-config.yaml
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name: sentinel-agent-windows-x86_64
            binary_name: sentinel-agent.exe
            test_config: tests/integration/test-config.yaml

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./artifacts

      - name: Set up QEMU for ARM64 emulation (Linux ARM64 only)
        if: matrix.qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Extract and prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd artifacts
          tar -xzf ${{ matrix.asset_name }}.tar.gz
          chmod +x ${{ matrix.binary_name }}
          cp ${{ matrix.binary_name }} ../sentinel-agent-test

      - name: Extract and prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd artifacts
          Expand-Archive -Path ${{ matrix.asset_name }}.zip -DestinationPath .
          cp ${{ matrix.binary_name }} ../sentinel-agent-test.exe

      - name: Test binary help command (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.qemu }}" == "true" ]]; then
            # Test ARM64 binary with QEMU
            docker run --rm -v $(pwd):/workspace --platform linux/arm64 ubuntu:22.04 \
              /workspace/sentinel-agent-test --help
          else
            ./sentinel-agent-test --help
          fi

      - name: Test binary help command (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./sentinel-agent-test.exe --help

      - name: Test binary version command (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.qemu }}" == "true" ]]; then
            # Test ARM64 binary with QEMU
            docker run --rm -v $(pwd):/workspace --platform linux/arm64 ubuntu:22.04 \
              /workspace/sentinel-agent-test --version
          else
            ./sentinel-agent-test --version
          fi

      - name: Test binary version command (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./sentinel-agent-test.exe --version

      - name: Test configuration loading (Unix)
        if: matrix.os != 'windows-latest'
        timeout-minutes: 2
        run: |
          # Test that binary can load config and start (will fail after a few seconds due to no API, but that's expected)
          if [[ "${{ matrix.qemu }}" == "true" ]]; then
            # Test ARM64 binary with QEMU
            timeout 10s docker run --rm -v $(pwd):/workspace --platform linux/arm64 ubuntu:22.04 \
              /workspace/sentinel-agent-test --config /workspace/${{ matrix.test_config }} || true
          else
            timeout 10s ./sentinel-agent-test --config ${{ matrix.test_config }} || true
          fi
          echo "✅ Binary successfully loaded configuration and attempted to start"

      - name: Test configuration loading (Windows)
        if: matrix.os == 'windows-latest'
        timeout-minutes: 2
        run: |
          # Test that binary can load config and start (will timeout, but that's expected)
          Start-Process -FilePath "./sentinel-agent-test.exe" -ArgumentList "--config", "${{ matrix.test_config }}" -NoNewWindow -PassThru | Wait-Process -Timeout 10 -ErrorAction SilentlyContinue
          Write-Output "✅ Binary successfully loaded configuration and attempted to start"

      - name: Verify binary architecture (Unix)
        if: matrix.os != 'windows-latest' && matrix.qemu != true
        run: |
          echo "🔍 Verifying binary architecture..."
          file ./sentinel-agent-test
          
          # Check that the binary matches expected architecture
          case "${{ matrix.target }}" in
            "x86_64-unknown-linux-gnu")
              file ./sentinel-agent-test | grep -q "x86-64" || (echo "❌ Expected x86-64 binary" && exit 1)
              ;;
            "x86_64-apple-darwin")
              file ./sentinel-agent-test | grep -q "x86_64" || (echo "❌ Expected x86_64 binary" && exit 1)
              ;;
            "aarch64-apple-darwin")
              file ./sentinel-agent-test | grep -q "arm64" || (echo "❌ Expected arm64 binary" && exit 1)
              ;;
          esac
          echo "✅ Binary architecture verified"

  release:
    name: Create GitHub Release
    needs: [unit-tests, build, test-binaries]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag for changelog generation
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        echo "## Installation" > release_notes.md
        echo "" >> release_notes.md
        echo "### Quick Install" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/install.sh | bash" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### Manual Download" >> release_notes.md
        echo "Download the appropriate binary for your platform below, extract it, and run:" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "./sentinel-agent --config /path/to/config.yaml" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since previous tag, excluding merge commits
          git log --pretty=format:"- %s" --no-merges ${PREVIOUS_TAG}..HEAD >> release_notes.md
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.version.outputs.version }}" >> release_notes.md
        else
          echo "## What's New" >> release_notes.md
          echo "" >> release_notes.md
          echo "Initial release of Sentinel Agent - a lightweight, open-source monitoring agent for collecting system metrics." >> release_notes.md
          echo "" >> release_notes.md
          echo "### Features" >> release_notes.md
          echo "- 🚀 Lightweight Rust-based agent with minimal resource usage" >> release_notes.md
          echo "- 📊 Comprehensive disk space monitoring with configurable filtering" >> release_notes.md
          echo "- 🔧 YAML-based configuration for easy management" >> release_notes.md
          echo "- 📦 Batched metric collection with HTTP API delivery" >> release_notes.md
          echo "- 🛡️ Secure, auditable open-source codebase" >> release_notes.md
          echo "- 🔄 Systemd service integration with automatic restart" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Platform Support" >> release_notes.md
        echo "- Linux (x86_64, ARM64)" >> release_notes.md
        echo "- macOS (Intel, Apple Silicon)" >> release_notes.md
        echo "- Windows (x86_64)" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Checksums" >> release_notes.md
        echo "Verify your download with the provided SHA256 checksums." >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}